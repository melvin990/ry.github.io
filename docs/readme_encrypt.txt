
以下是基于当前加密解密工具的详细使用说明文档，并包含各种加密算法的原理说明。这份文档旨在帮助用户理解工具功能及其背后的技术原理。
高级加密解密工具使用说明文档
概述
这是一个基于HTML、jQuery和CSS开发的加密解密工具，支持多种加密算法，包括对称加密、非对称加密和哈希算法。工具可在浏览器中运行，支持离线使用（需预加载库），并提供美观、易用的界面，适配手机和电脑。
功能特性
支持的加密算法：Base64、AES-256-CBC、DES、3DES、RSA、MD5、SHA-256
加密解密流程：
加密：从输入框取值，加密后清空输入框，结果显示到输出框
解密：从输出框取值，解密后清空输出框，结果显示到输入框
密钥管理：
一键生成随机密钥（AES、DES、3DES）
生成RSA公钥私钥对
额外功能：
文件拖放支持
主题切换（浅色/深色）
结果复制
清空输入输出
使用说明
界面布局
顶部按钮：
“切换主题”：切换深色/浅色模式
“生成RSA密钥对”：生成RSA公钥和私钥
“生成随机密钥”：为AES/DES/3DES生成随机密钥
加密方式选择：下拉菜单选择加密算法
密钥输入框：针对需要密钥的算法显示，包含默认值和格式提示
加密输入框（#input）：输入待加密文本或拖放文件
操作按钮：
“加密”：执行加密操作
“解密”：执行解密操作
“清除”：清空所有输入输出
解密输入/输出框（#output）：显示加密结果或输入待解密内容，含“复制”按钮
操作步骤
1. 加密文本
在“加密输入框”输入待加密文本，或拖放文本文件。
从下拉菜单选择加密算法。
对于AES/DES/3DES/RSA：
输入密钥，或点击“生成随机密钥”（AES/DES/3DES）/“生成RSA密钥对”（RSA）。
RSA需确保密钥框中有公钥。
点击“加密”按钮。
“加密输入框”清空，加密结果显示在“解密输入/输出框”。
2. 解密文本
在“解密输入/输出框”输入待解密内容（通常是上一步加密结果）。
确保选择了正确的加密算法。
对于AES/DES/3DES/RSA：
输入对应密钥（与加密时相同），RSA需使用私钥。
点击“解密”按钮。
“解密输入/输出框”清空，解密结果显示在“加密输入框”。
3. 生成密钥
随机密钥（AES/DES/3DES）：
选择算法（AES/DES/3DES）。
点击“生成随机密钥”。
密钥框显示新生成的密钥，输出框显示提示。
RSA密钥对：
点击“生成RSA密钥对”。
输入框显示公钥，输出框显示私钥，密钥框默认填入公钥。
4. 其他操作
复制结果：点击“复制”按钮复制输出框内容。
清除：点击“清除”重置所有输入输出。
主题切换：点击“切换主题”更改界面风格。
加密算法原理
1. Base64
类型：编码（非加密）
原理：
将二进制数据转换为ASCII字符表示，每3字节（24位）分为4个6位组，每组映射为64个字符（A-Z、a-z、0-9、+/）。
不足3字节时用=填充。
用途：数据传输编码，不提供保密性。
特点：可逆，编码后数据量增加约33%。
2. AES-256-CBC (Advanced Encryption Standard)
类型：对称加密
原理：
使用256位密钥（32字节），分组长度128位。
CBC（Cipher Block Chaining）模式：每块明文与前一块密文异或后加密，首块使用随机IV（初始向量，包含在输出中）。
加密过程包括轮函数（SubBytes、ShiftRows、MixColumns、AddRoundKey），共14轮。
用途：文件加密、网络通信。
特点：安全性高，需密钥一致，IV确保相同明文加密结果不同。
3. DES (Data Encryption Standard)
类型：对称加密
原理：
使用56位密钥（实际输入8字节，含校验位），分组长度64位。
采用Feistel网络结构，16轮加密，每轮包括扩展、置换、S盒替换和P盒置换。
用途：早期标准加密，现安全性较低。
特点：密钥短，易被暴力破解，已不推荐。
4. Triple DES (3DES)
类型：对称加密
原理：
对DES改进，应用三次DES加密（加密-解密-加密），有效密钥长度168位（实际输入24字节）。
可使用1-3个不同密钥，增强安全性。
用途：过渡性加密方案。
特点：比DES安全，但较慢，仍可能被现代攻击破解。
5. RSA (Rivest-Shamir-Adleman)
类型：非对称加密
原理：
基于大整数因子分解难题。
生成公钥（n, e）和私钥（n, d），n为两个大质数p和q的乘积。
加密：c = m^e mod n（m为明文）；解密：m = c^d mod n。
用途：密钥交换、数字签名。
特点：
公钥加密私钥解密（或反之），安全性依赖大数分解难度。
速度慢，适合小数据量。
6. MD5 (Message Digest Algorithm 5)
类型：单向哈希
原理：
输入任意长度数据，输出128位（16字节）固定长度哈希值。
使用4轮64步操作，包括位运算和非线性函数。
用途：数据完整性校验。
特点：不可逆，易发生碰撞（相同哈希不同输入），不用于安全加密。
7. SHA-256 (Secure Hash Algorithm 256-bit)
类型：单向哈希
原理：
输入数据分512位块，输出256位（32字节）哈希值。
64轮操作，使用逻辑函数、模加和常量表。
用途：数字签名、区块链。
特点：比MD5安全，抗碰撞性强，不可逆。
注意事项
密钥安全：
AES/DES/3DES需保存密钥，丢失无法解密。
RSA公钥私钥需分别用于加密和解密。
算法选择：
MD5/SHA-256仅用于校验，无法解密。
DES安全性低，仅限学习用途。
性能：
RSA适合小数据，处理大文件建议用对称加密。
离线使用：
保存HTML文件及CDN库（jQuery、CryptoJS、JSEncrypt）到本地。
示例操作
加密解密流程
输入“hello”，选择AES，点击“生成随机密钥”。
点击“加密”，输出框显示加密结果，输入框清空。
点击“解密”，输入框显示“hello”，输出框清空。
RSA密钥使用
点击“生成RSA密钥对”，复制私钥备用。
输入“test”，密钥框保留公钥，点击“加密”。
输出框显示密文，替换密钥框为私钥，点击“解密”，输入框显示“test”。
技术支持
依赖库：
jQuery 3.6.0
CryptoJS 4.1.1（AES/DES/3DES/MD5/SHA-256）
JSEncrypt 3.3.2（RSA）
问题反馈：如遇bug，请记录算法、输入和错误信息。
这份文档详细说明了工具的使用方法和每种算法的原理，适合新手和有一定技术背景的用户参考。



在离线状态下，使用 HTML、JavaScript (JS)、jQuery 和 CSS 实现加密，安全性最高的加密方式取决于以下几个关键因素：
算法强度：选择经过广泛验证的现代加密算法。

实现环境：浏览器端的 JavaScript 受限于客户端环境，需避免依赖在线资源。

密钥管理：离线场景下密钥生成和存储的安全性至关重要。

完整性保护：防止篡改和伪造。

在这种情况下，AES-GCM (Advanced Encryption Standard with Galois/Counter Mode) 是安全性最高且最实用的选择，尤其是在使用浏览器的 Web Crypto API 时。原因如下：

为什么 AES-GCM 是离线状态下安全性最高的选择？
对称加密强度：
AES 是目前最广泛使用的对称加密标准，256 位密钥版本 (AES-256) 提供极高的安全性，抗量子计算能力较强。

GCM 模式结合了加密和完整性保护，通过认证标签 (Authentication Tag) 防止篡改。

Web Crypto API 的原生支持：
现代浏览器内置 Web Crypto API，提供硬件级别的加密实现，比纯 JS 库（如 CryptoJS）更快、更安全。

不依赖外部网络资源，完全适配离线环境。

随机性：
Web Crypto API 的 crypto.getRandomValues() 方法提供加密安全的随机数生成，用于生成密钥和初始化向量 (IV)，避免弱随机性的安全隐患。

完整性与机密性：
GCM 模式内置认证机制，解密时会验证数据完整性，防止中间人攻击或伪造。

离线兼容性：
不需要加载在线库（如 CDN），只需本地 HTML 文件即可运行。

相比之下，其他选项（如 AES-CBC 或纯 JS 实现的 RSA）在离线场景下存在以下不足：
AES-CBC：缺乏完整性保护，易受填充预言机攻击。

RSA：非对称加密需要较长的密钥对，计算开销大，且离线环境下难以安全分发公钥。

第三方库（如 CryptoJS）：纯 JS 实现速度慢，易受侧信道攻击，且需额外引入文件，增加复杂度。

实现 AES-GCM 的安全性优化
为了在离线状态下最大化安全性，以下是关键优化点：
密钥生成：
使用 crypto.getRandomValues() 生成 256 位随机密钥，避免用户输入弱密钥。

通过 PBKDF2 增强用户输入密钥（若允许手动输入）。

IV 管理：
每次加密生成随机 96 位 IV，避免重用。

盐值：
为 PBKDF2 添加随机盐值，增强密钥派生安全性。

完整性：
利用 GCM 的认证标签，确保解密时验证数据未被篡改。

避免泄露：
不在全局作用域存储密钥，尽量使用局部变量或缓存机制。

